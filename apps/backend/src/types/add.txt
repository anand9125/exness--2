BASE: the asset you are buying or selling.

 QUOTE: the asset you pay with (or receive) when trading the base.

 ask price: the lowest price someone is willing to sell.

Used when the user is buying, because buyers pay the seller’s ask price.

 bid price: the highest price someone is willing to buy.

 Used when the user is selling, because sellers receive the buyer’s bid price.
 
If you buy market → you take the ask = 101.
If you sell market → you take the bid = 99




# why use Decimal.js
 console.log(0.1 + 0.2); 
 Output: 0.30000000000000004 
correct way

 import Decimal from "decimal.js";
 const a = new Decimal(0.1);
const b = new Decimal(0.2);
 const sum = a.plus(b);
 console.log(sum.toString());
 Output: "0.3" ✅

 In decimal.js, .toFixed() is used to convert a Decimal value into a string with a fixed number of decimal places.
Using .toFixed() ensures you don’t accidentally store 251.87499999999997 instead of 251.875.

# why pending then excute => Even though this is a market order (instant execution), the lifecycle of an order in trading systems usually looks like:
created → pending → (partially filled) → filled/executed → closed/cancelled
"pending" = order exists in the system but execution hasn’t been confirmed.
"executed" = order has actually traded and funds were moved.
By keeping "pending" first, your schema supports other order types later (limit, stop, etc.) where "pending" might last seconds, minutes, or even days.
Atomicity & error handling

If you insert directly with "executed":
Imagine execution fails (maybe balance update throws, or DB lock fails).
Now you have an executed order record without actual funds movement → inconsistent state.
With "pending" first:
If the transaction fails during execution, the "pending" never gets flipped to "executed".
Everything rolls back cleanly.

. Extensibility
Right now it’s:
"pending" → immediately "executed" (for market orders).
But if you add:
Limit orders: "pending" could stay until matched with another user’s order.
Stop orders: "pending" until trigger price is hit.
Partially filled orders: "pending" until volume is fully executed.
So this pattern is future-proofing your engine.