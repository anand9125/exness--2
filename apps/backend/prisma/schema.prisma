generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  balance  Balance[]
  positions  Position[]
  transactions  Transaction[]
  order     Order[]
}


model Instrument { 
  id        Int      @id @default(autoincrement())
  name      String
  symbol    String
  ///todo add intrument type that says what kind of market symbol an instrument belongs to.
  orders    Order[]
  balance   Balance[]
  positions Position[]
}

model Balance {
  id        Int      @id @default(autoincrement())
  userId     Int    
  user      User     @relation(fields: [userId], references: [id])  
  assetId    Int
  asset      Instrument  @relation(fields: [assetId], references: [id])
  quantity Decimal @default(0.0)    
  locked Decimal @default(0.0)   
  updatedAt DateTime @updatedAt
  @@unique([userId, assetId])  
  @@index([userId])
  @@index([assetId])
}

model Order {
  id        Int      @id @default(autoincrement())
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
  instrumentId Int  //which symboel for we do order
  instrument  Instrument  @relation(fields: [instrumentId], references: [id])
  type        OrderType
  volumeLot     Decimal  
  openDecimal   Decimal   
  stopLoss      Decimal?  
  takeProfit    Decimal? 
  status        OrderStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactions Transaction[]
  

}


model Position{       
  id        Int      @id @default(autoincrement())
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
  instrumentId Int
  instrument  Instrument  @relation(fields: [instrumentId], references: [id])
  type        PositionType
  volumeLot     Decimal 
  openDeciaml   Decimal   
  currentDecimal   Decimal?   
  pnl             Decimal   
  createdAt DateTime @default(now())
  closedAt DateTime?
  transactions Transaction[]

}

model Transaction {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  type TransactionType
  amount Decimal
  status TransactionStatus @default(pending)
  createdAt DateTime @default(now())
  order       Order?     @relation(fields: [orderId], references: [id])
  orderId     Int?
  position    Position?  @relation(fields: [positionId], references: [id])
  positionId  Int?

}


enum OrderType {
  Buy
  Sell
}

enum OrderStatus {
  pending
  executed
  cancelled
}

enum PositionType {  //its tell the direction of trade
  long     //Long (buy): You want price to go up
  short    //Short (sell): You want price to go down.
}

enum TransactionType {
  deposit
  withdrawal
}

enum TransactionStatus {
  pending
  completed
  failed
}